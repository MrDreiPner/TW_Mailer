               /*if(enterPress < 2)
               printf("Sender >> ");
               else if(enterPress <= 2)
               printf("Receiver >> ");
               fgets(buffer, BUF, stdin);
               if(enterPress <= 2){
                  while(!verify(buffer, "user")){
                     if(enterPress < 2)
                     printf("Sender >> ");
                     else
                     printf("Receiver >> ");
                     fgets(buffer, BUF, stdin);
                  }    
               }
               if(enterPress == 3){
                  printf("Subject >> ");
                  fgets(buffer, BUF, stdin); 
                  while(strlen(buffer) > 80){
                     std::cout << "Subject line too long. Max 80 characters allowed" << std::endl;
                     printf("Subject >> ");
                     fgets(buffer, BUF, stdin); 
                  }
               }
               if(enterPress > 3){
                  printf("Message >> ");
                  fgets(buffer, BUF, stdin);
               }
               if(!delimiterSent){
                  size = strlen(buffer);
                  send(create_socket, buffer, size, 0);   
               }
               if(buffer[0] == '.') 
                  delimiterSent = true;
               enterPress++;*/

               
//send verified Number to Server
void sendNum(int create_socket, char* buffer){
   fgets(buffer, BUF, stdin);
   while(!verify(buffer, "num")){
      printf(">> ");
      fgets(buffer, BUF, stdin);
   }
   int size = strlen(buffer);
   //buffer[size-1] = '\0';
   send(create_socket, buffer, size, 0);
}


                    ////////// LONG MESSAGE NON FUNCTIONAL server
                     /*bool longTransmission = false;
                     if(strcmp(buffer,"LONG_TRANSMISSION") == 0){
                        printf("Start LONG_TRANSMISSION\n");
                        longTransmission = true;
                        while(longTransmission){
                           size = recv(*current_socket, buffer, BUF - 1, 0);
                           if(receiveMsgErrHandling(size))//returns true if an error has occured and ends the loop
                              break;
                           buffer[size] = '\0';
                           if(strcmp(message,"\0") == 0 && !(buffer[0] == '.'))
                              strcpy(message, buffer);
                           else if(!(buffer[0] == '.')){
                              strcat(message, buffer);
                           }
                           else{
                              state++;
                           }

                           size = recv(*current_socket, buffer, BUF - 1, 0);
                           if(receiveMsgErrHandling(size))//returns true if an error has occured and ends the loop
                              break;
                           buffer[size] = '\0';
                           std::cout << buffer << std::endl;
                           if(strcmp(buffer,"END_TRANSMISSION") == 0){
                              longTransmission = false;
                           }
                        }
                     }
                     else{   
                        printf("Start SHORT_TRANSMISSION\n");  
                        size = recv(*current_socket, buffer, BUF - 1, 0);
                        if(receiveMsgErrHandling(size))//returns true if an error has occured and ends the loop
                           break;
                        buffer[size] = '\0';
                        printf("Message received in SHORT_SEND: %s\n", buffer);
                        if(strcmp(message,"\0") == 0 && !(buffer[0] == '.'))
                           strcpy(message, buffer);
                        else if(!(buffer[0] == '.')){
                           strcat(message, buffer);
                        }
                        else if(buffer[0] == '.'){
                           state++;
                        }
                        printf("Current message: %s\n", message);
                        cleanBuffer(buffer);
                        size = recv(*current_socket, buffer, BUF, 0);
                        if(receiveMsgErrHandling(size))//returns true if an error has occured and ends the loop
                           break;
                        buffer[size] = '\0';
                        printf("END_TRANSMISSION = %s\n", buffer); ///////////// LAST END TRANSMISSION DID NOT GET SENT OR RECEIVED
                        cleanBuffer(buffer);
                     }*/


                        ////////// LONG MESSAGE NON FUNCTIONAL //////////// client
                        /*std::cout << "Message >> ";
                        fgets(buffer, 5000, stdin);
                        size = strlen(buffer);
                        buffer[size-1] = '\0';
                        if(size > BUF){
                           char tempBuffer[BUF] = "\0";
                           int bottom = 0;
                           bool tooBig = true;
                           send(create_socket, "LONG_TRANSMISSION", 18, 0);
                           while(tooBig){
                              strncpy(tempBuffer, &buffer[bottom], BUF);
                              tempBuffer[BUF] = '\0';
                              size -= BUF;
                              bottom += BUF;
                              if(size < BUF){
                                 if (send(create_socket, tempBuffer, size, 0) == -1){
                                    perror("send failed");
                                    return 0;
                                 }
                                 if (send(create_socket, "END_TRANSMISSION", 17, 0) == -1){
                                    perror("send failed");
                                    return 0;
                                 }
                                 tooBig = false;
                                 break;
                              }
                              else{
                                 send(create_socket, tempBuffer, BUF, 0);
                                 send(create_socket, "KEEP_TRANSMISSION", 18, 0);
                              }
                           }
                        }
                        else{
                           printf("Start SHORT_TRANSMISSION\n");  
                           if (send(create_socket, "SHORT_TRANSMISSION", 19, 0) == -1){
                              perror("ST send failed");
                              return 0;
                           }
                           std::cout << "Send message: " << buffer << std::endl;
                           if (send(create_socket, buffer, size, 0) == -1){
                              perror("PKG send failed");
                              return 0;
                           }
                           printf("Start END_TRANSMISSION\n");             ///////////// LAST END TRANSMISSION DID NOT GET SENT OR RECEIVED
                           if (send(create_socket, "END_TRANSMISSION", 17, 0) == -1){
                              perror("ET send failed");
                              return 0;
                           }
                        }*/